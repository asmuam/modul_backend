// import request from 'supertest';
// import app from '../src/app.js';
// import { prisma } from '../src/database.js';

// describe('User API', () => {
//     let token;

//     beforeAll(async () => {
//         // Clear existing data
//         await prisma.user.deleteMany({});

//         // Register and login a user to get a valid token
//         await request(app)
//             .post('/api/auth/register')
//             .send({
//                 username: 'testuser',
//                 password: 'password',
//                 email: 'test@example.com'
//             });
//         const loginResponse = await request(app)
//             .post('/api/auth/login')
//             .send({
//                 username: 'testuser',
//                 password: 'password'
//             });
//         token = loginResponse.body.token;

//         // Create a test user if needed
//         await prisma.user.create({
//             data: {
//                 username: 'testuser2',
//                 password: 'password',
//                 email: 'test2@example.com'
//             }
//         });
//     });

//     it('should get all users', async () => {
//         const response = await request(app)
//             .get('/api/users')
//             .set('Authorization', `Bearer ${token}`);
//         expect(response.status).toBe(200);
//     });

//     it('should get a user by ID', async () => {
//         // Assuming you have created a user with ID 1
//         const response = await request(app)
//             .get('/api/users/1')
//             .set('Authorization', `Bearer ${token}`);
//         expect(response.status).toBe(200);
//     });

//     it('should update a user', async () => {
//         // Assuming you have created a user with ID 1
//         const response = await request(app)
//             .put('/api/users/1')
//             .set('Authorization', `Bearer ${token}`)
//             .send({
//                 username: 'updateduser'
//             });
//         expect(response.status).toBe(200);
//     });

//     it('should delete a user', async () => {
//         // Assuming you have created a user with ID 1
//         const response = await request(app)
//             .delete('/api/users/1')
//             .set('Authorization', `Bearer ${token}`);
//         expect(response.status).toBe(204);
//     });
// });
